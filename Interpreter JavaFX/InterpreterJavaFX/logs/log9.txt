Program state with ID: 3
Execution stack:
{(reference(int) v; (new(v, 20); (reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))))}
Symbol table:
{}
Output:
{}
Heap:
{}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 20); (reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))) | reference(int) v}
Symbol table:
{}
Output:
{}
Heap:
{}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 20); (reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))) | reference(int) v}
Symbol table:
{}
Output:
{}
Heap:
{}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 20); (reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))))}
Symbol table:
{v -> (0, int)}
Output:
{}
Heap:
{}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 20); (reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))))}
Symbol table:
{v -> (0, int)}
Output:
{}
Heap:
{}
File table:
{}

Program state with ID: 3
Execution stack:
{(reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))) | new(v, 20)}
Symbol table:
{v -> (0, int)}
Output:
{}
Heap:
{}
File table:
{}

Program state with ID: 3
Execution stack:
{(reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))) | new(v, 20)}
Symbol table:
{v -> (0, int)}
Output:
{}
Heap:
{}
File table:
{}

Program state with ID: 3
Execution stack:
{(reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))}
Symbol table:
{v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(reference(reference(int)) a; (new(a, v); (new(v, 30); print(readHeap(readHeap(a))))))}
Symbol table:
{v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(a, v); (new(v, 30); print(readHeap(readHeap(a))))) | reference(reference(int)) a}
Symbol table:
{v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(a, v); (new(v, 30); print(readHeap(readHeap(a))))) | reference(reference(int)) a}
Symbol table:
{v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))}
Symbol table:
{a -> (0, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(a, v); (new(v, 30); print(readHeap(readHeap(a)))))}
Symbol table:
{a -> (0, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 30); print(readHeap(readHeap(a)))) | new(a, v)}
Symbol table:
{a -> (0, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 30); print(readHeap(readHeap(a)))) | new(a, v)}
Symbol table:
{a -> (0, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 30); print(readHeap(readHeap(a))))}
Symbol table:
{a -> (2, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20, 2 -> (1, int)}
File table:
{}

Program state with ID: 3
Execution stack:
{(new(v, 30); print(readHeap(readHeap(a))))}
Symbol table:
{a -> (2, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20, 2 -> (1, int)}
File table:
{}

Program state with ID: 3
Execution stack:
{print(readHeap(readHeap(a))) | new(v, 30)}
Symbol table:
{a -> (2, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20, 2 -> (1, int)}
File table:
{}

Program state with ID: 3
Execution stack:
{print(readHeap(readHeap(a))) | new(v, 30)}
Symbol table:
{a -> (2, reference(int)), v -> (1, int)}
Output:
{}
Heap:
{1 -> 20, 2 -> (1, int)}
File table:
{}

Program state with ID: 3
Execution stack:
{print(readHeap(readHeap(a)))}
Symbol table:
{a -> (2, reference(int)), v -> (3, int)}
Output:
{}
Heap:
{1 -> 20, 2 -> (1, int), 3 -> 30}
File table:
{}

Program state with ID: 3
Execution stack:
{print(readHeap(readHeap(a)))}
Symbol table:
{a -> (2, reference(int)), v -> (3, int)}
Output:
{}
Heap:
{1 -> 20, 2 -> (1, int), 3 -> 30}
File table:
{}

Program state with ID: 3
Execution stack:
{}
Symbol table:
{a -> (2, reference(int)), v -> (3, int)}
Output:
{20}
Heap:
{1 -> 20, 2 -> (1, int), 3 -> 30}
File table:
{}

